# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

variables: 
  owimage_lnx:  'ubuntu-latest'
  owimage_nt:   'vs2017-win2016'
  owimage_osx:  'macOS-latest'
  owobjdir_lnx: binlnx
  owobjdir_nt:  binnt
  owobjdir_osx: binosx
  owtools_lnx:  GCC
  owtools_nt:   VISUALC
  owtools_osx:  CLANG
  owscript_lnx: buildx.sh
  owscript_nt:  buildx.cmd
  owscript_osx: buildx.sh
  owarch_lnx:   lnx
  owarch_nt:    nt
  owarch_osx:   osx

schedules:
- cron: "0 1 * * *"
  displayName: Daily build
  branches:
    include:
    - master

trigger:
- master

pr:
  branches:
    include: 
    - master

stages:
  - stage: boot
    displayName: "Bootstrap"
    jobs:
      - job: Bootstrap
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
            OSX:
              owarch:   ${{ variables.owarch_osx }}
              owobjdir: ${{ variables.owobjdir_osx }}
              owimage:  ${{ variables.owimage_osx }}
              owtools:  ${{ variables.owtools_osx }}
              owscript: ${{ variables.owscript_osx }}
        pool:
          vmImage: $(owimage)
        steps:
        - script: echo Build Reason = $(Build.Reason)
        - script: azure/$(owscript)
          displayName: "Bootstrap"
          env:
            OWBUILD_STAGE: boot
        - template: azure/artifsav.yml
  - stage: build
    displayName: "Build"
    dependsOn: boot
    jobs:
      - job: Build
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
            OSX:
              owarch:   ${{ variables.owarch_osx }}
              owobjdir: ${{ variables.owobjdir_osx }}
              owimage:  ${{ variables.owimage_osx }}
              owtools:  ${{ variables.owtools_osx }}
              owscript: ${{ variables.owscript_osx }}
        pool:
          vmImage: $(owimage)
        timeoutInMinutes: 90
        steps:
        - template: azure/artiflod.yml
        - script: sudo apt-get install -y dosbox
          displayName: "Install DOSBOX Linux"
          condition: in( variables.owarch, variables.owarch_lnx )
        - script: brew install dosbox
          displayName: "Install DOSBOX OSX"
          condition: in( variables.owarch, variables.owarch_osx )
        - script: azure/$(owscript)
          displayName: "Build"
          env: 
            OWBUILD_STAGE: build
        - template: azure/relsave.yml
        - template: azure/instsave.yml
  - stage: tests
    displayName: "Tests"
    dependsOn: build
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))
    jobs:
      - job: Tests
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
        pool:
          vmImage: $(owimage)
        steps:
        - template: azure/artiflod.yml
  - stage: docs
    displayName: "Documentation Build"
    dependsOn: boot
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))
    jobs:
      - job: Documentation
        variables:
          owarch: $(owarch_nt)
          owobjdir: ${{ variables.owobjdir_nt }}
          owtools: ${{ variables.owtools_nt }}
        strategy:
          matrix:
            DOS:
              target: dos
              doctarget: docdos
            Html:
              target: htmlhelp
              doctarget: dochtml
            NT:
              target: nt
              doctarget: docnt
            OS2:
              target: os2
              doctarget: docos2
            PDF:
              target: pdf
              doctarget: docpdf
            WIN:
              target: win
              doctarget: docwin
        pool:
          vmImage: $(owimage_nt)
        steps:
        - template: azure/artiflod.yml
        - script: azure/$(owscript_nt)
          displayName: "Documentation Build"
          env:
            OWBUILD_STAGE: docs
            OWDOCTARGET: $(target)
        - template: azure/relsave.yml
          parameters: {owobjdir: $(doctarget)}
  - stage: update
    displayName: "Build Consolidation"
    dependsOn: 
      - docs
      - tests
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))
    jobs:
      - job: update
        displayName: "Build Consolidation"
        variables:
          owarch: $(owarch_lnx)
        pool:
          vmImage: $(owimage_lnx)
        steps:
        # consolidate binaries
        - template: azure/relload.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        - template: azure/relload.yml
          parameters: {owobjdir: $(owobjdir_nt)}
        # consolidate documentation
        - template: azure/relload.yml
          parameters: {owobjdir: docdos}
        - template: azure/relload.yml
          parameters: {owobjdir: dochtml}
        - template: azure/relload.yml
          parameters: {owobjdir: docnt}
        - template: azure/relload.yml
          parameters: {owobjdir: docos2}
        - template: azure/relload.yml
          parameters: {owobjdir: docpdf}
        - template: azure/relload.yml
          parameters: {owobjdir: docwin}
        # complete OW release artifact
        - template: azure/relsave.yml
          parameters: {owobjdir: binall}
  - stage: instal
    displayName: "Installers Build"
    dependsOn: update
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))
    jobs:
      - job: instal
        displayName: "Installers Build"
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
        pool:
          vmImage: $(owimage)
        steps:
        - template: azure/artiflod.yml
        - template: azure/instload.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        - template: azure/instload.yml
          parameters: {owobjdir: $(owobjdir_nt)}
        - template: azure/relload.yml
          parameters: {owobjdir: binall}
        - script: azure/$(owscript)
          displayName: "Build Installers"
          env:
            OWBUILD_STAGE: inst
        # create full binary archive
        - task: ArchiveFiles@2
          condition: in( variables.owarch, variables.owarch_lnx )
          inputs:
            rootFolderOrFile: 'rel'
            includeRootFolder: false
            archiveType: 'tar'
            archiveFile: 'distrib/ow/bin/ow-snapshot.tar.gz'
            replaceExistingArchive: true
        # save all artifacts for distribution
        - template: azure/distsave.yml
  - stage: release
    displayName: "GitHub Release"
    dependsOn: instal
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Schedule'))
    jobs:
      - job: release
        displayName: "GitHub Release"
        variables:
          owarch: $(owarch_lnx)
          owtag: Current-build
        pool:
          vmImage: $(owimage_lnx)
        steps:
        - checkout: self
          persistCredentials: true
        - template: azure/artiflod.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        - template: azure/distload.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        - template: azure/distload.yml
          parameters: {owobjdir: $(owobjdir_nt)}
        - template: azure/distsave.yml
          parameters: {owobjdir: binall}
        - bash: echo "##vso[task.setvariable variable=owtagstamp;]$(date +'%Y-%m-%d %H:%M:%S')"
          displayName: "Get current timestamp"
        - bash: echo "##vso[task.setvariable variable=owgitstamp;]`git ls-remote --tags . | sed -n -e \"s:\([0-9a-z]*\) *refs/tags/${{ variables.owtag }}^{}:\1:p\"`"
          displayName: "Get 'Current-build' tag commit"
        - script: git config --global user.email "openwatcomazure@gmail.com"
        - script: git config --global user.name "Open Watcom Azure"
        - bash: >
            if [ ! "$OWGITSTAMP" = "$BUILD_SOURCEVERSION" ]; then
              git tag -d $OWTAG
              git push --delete origin $OWTAG
              git tag -a -m "$OWTAGSTAMP" $OWTAG $BUILD_SOURCEVERSION
              git push origin $OWTAG
            else
              echo "##vso[task.setvariable variable=owtagstamp;]`git tag -l --format='%(contents)' $OWTAG`"
            fi
          displayName: "Recreate 'Current-build' tag"
        - task: GitHubRelease@0
          name: releasedel
          displayName: "Delete Release"
          continueOnError: true
          inputs:
            gitHubConnection: 'open-watcom-v2-releases'
            action: 'delete'
            tag: '$(owtag)'
        - task: GitHubRelease@0
          name: releaseadd
          displayName: "Add Release"
          condition: succeededOrFailed()
          inputs:
            gitHubConnection: 'open-watcom-v2-releases'
            repositoryName: '$(Build.Repository.Name)'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'manual'
            tag: '$(owtag)'
            title: '$(owtag)'
            releaseNotesSource: 'input'
            releaseNotes: 'Last updated $(owtagstamp)'
            assets: |
              distrib/ow/bin/open-watcom-*
              distrib/ow/bin/ow-snapshot.tar.gz
            isPreRelease: true
            addChangeLog: false
