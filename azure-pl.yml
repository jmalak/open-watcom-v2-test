# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

schedules:
- cron: "10 1 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

variables: 
  owimage_lnx:  'ubuntu-latest'
  owimage_nt:   'vs2017-win2016'
  owimage_osx:  'macOS-latest'
  owobjdir_lnx: binlnx
  owobjdir_nt:  binnt
  owobjdir_osx: binosx
  owtools_lnx:  GCC
  owtools_nt:   VISUALC
  owtools_osx:  CLANG
  owscript_lnx: buildx.sh
  owscript_nt:  buildx.cmd
  owscript_osx: buildx.sh
  owarch_lnx:   lnx
  owarch_nt:    nt
  owarch_osx:   osx
  owartifact:   $(Pipeline.Workspace)/owartifact.tar.gz
  owartifact7z: owartifact.tar

stages:
  - stage: start
    displayName: "Start"
    jobs:
      - job: start
        steps:
        - checkout: none
  - stage: mirror
    displayName: "Mirror to SF"
    dependsOn:
      - start
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
    jobs:
      - job: mirror
        steps:
        - script: |
            set -x
            mkdir ~/.ssh
            ssh-keyscan git.code.sf.net > ~/.ssh/known_hosts
            export DISPLAY=:0
            export SSH_PASSWORD=$(sftoken2)
            export SSH_ASKPASS=azure/askpass.sh
            export GIT_ASKPASS=azure/askpass.sh
            export GIT_SSH_COMMAND="setsid ssh"
            git remote set-url --push origin ssh://$(sftoken1)@git.code.sf.net/p/openwatcom/open-watcom-v2
            git checkout master
            git push -v
          displayName: "Mirror to SF"
  - stage: boot
    displayName: "Bootstrap"
    dependsOn:
      - start
    jobs:
      - job: Bootstrap
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
            OSX:
              owarch:   ${{ variables.owarch_osx }}
              owobjdir: ${{ variables.owobjdir_osx }}
              owimage:  ${{ variables.owimage_osx }}
              owtools:  ${{ variables.owtools_osx }}
              owscript: ${{ variables.owscript_osx }}
        pool:
          vmImage: $(owimage)
        steps:
        - script: azure/$(owscript)
          displayName: "Bootstrap"
          env:
            OWBUILD_STAGE: boot
        - template: azure/artifsav.yml
  - stage: build
    displayName: "Build"
    dependsOn:
      - boot
    jobs:
      - job: Build
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
            OSX:
              owarch:   ${{ variables.owarch_osx }}
              owobjdir: ${{ variables.owobjdir_osx }}
              owimage:  ${{ variables.owimage_osx }}
              owtools:  ${{ variables.owtools_osx }}
              owscript: ${{ variables.owscript_osx }}
        pool:
          vmImage: $(owimage)
        timeoutInMinutes: 90
        steps:
        - template: azure/artiflod.yml
        - script: |
            for i in {1..10}
            do
              sudo apt-get install -y dosbox
              if [ $? = 0 ]; then
                break
              fi
            done
          displayName: "Install DOSBOX Linux"
          condition: in( variables.owarch, variables.owarch_lnx )
        - script: brew install dosbox
          displayName: "Install DOSBOX OSX"
          condition: in( variables.owarch, variables.owarch_osx )
        - script: azure/$(owscript)
          displayName: "Build"
          env: 
            OWBUILD_STAGE: build
        - template: azure/relsave.yml
          parameters:
            owcond: in( variables.owarch, variables.owarch_lnx, variables.owarch_nt )
        - template: azure/instsave.yml
          parameters:
            owcond: in( variables.owarch, variables.owarch_lnx, variables.owarch_nt )
  - stage: tests
    displayName: "Tests"
    dependsOn:
      - build
    jobs:
      - job: Tests
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
        pool:
          vmImage: $(owimage)
        steps:
        - template: azure/artiflod.yml
  - stage: docs
    displayName: "Documentation Build"
    dependsOn:
      - boot
    jobs:
      - job: Documentation
        variables:
          owarch: $(owarch_nt)
          owobjdir: ${{ variables.owobjdir_nt }}
          owtools: ${{ variables.owtools_nt }}
        strategy:
          matrix:
            DOS:
              owdoctarget: docdos
            Html:
              owdoctarget: dochtml
            NT:
              owdoctarget: docnt
            OS2:
              owdoctarget: docos2
            PDF:
              owdoctarget: docpdf
            WIN:
              owdoctarget: docwin
            Wiki Html:
              owdoctarget: wikihtml -- docset=wikihtml
            Wiki PDF:
              owdoctarget: wikipdf -- docset=wikipdf
        pool:
          vmImage: $(owimage_nt)
        steps:
        - template: azure/artiflod.yml
        - script: azure/$(owscript_nt)
          displayName: "Documentation Build"
          env:
            OWBUILD_STAGE: docs
            #OWDOCTARGET: variables['owdoctarget']
        - template: azure/relsave.yml
          parameters:
            owobjdir: "$(owdoctarget)"
            owcond: not(startsWith(variables['owdoctarget'], 'wiki'))
        - template: azure/wikisave.yml
  - stage: instal
    displayName: "Installers Build"
    dependsOn:
      - docs
      - tests
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'Schedule'))
    jobs:
      - job: instal
        displayName: "Installers Build"
        strategy:
          matrix:
            Linux:
              owarch:   ${{ variables.owarch_lnx }}
              owobjdir: ${{ variables.owobjdir_lnx }}
              owimage:  ${{ variables.owimage_lnx }}
              owtools:  ${{ variables.owtools_lnx }}
              owscript: ${{ variables.owscript_lnx }}
            Windows:
              owarch:   ${{ variables.owarch_nt }}
              owobjdir: ${{ variables.owobjdir_nt }}
              owimage:  ${{ variables.owimage_nt }}
              owtools:  ${{ variables.owtools_nt }}
              owscript: ${{ variables.owscript_nt }}
        pool:
          vmImage: $(owimage)
        steps:
        - template: azure/artiflod.yml
        - template: azure/instload.yml
          parameters: {owobjdir: $(owobjdir_nt)}
        - template: azure/instload.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        # consolidate binaries
        - template: azure/relload.yml
          parameters: {owobjdir: $(owobjdir_nt)}
        - template: azure/relload.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        # consolidate documentation
        - template: azure/relload.yml
          parameters: {owobjdir: docdos}
        - template: azure/relload.yml
          parameters: {owobjdir: dochtml}
        - template: azure/relload.yml
          parameters: {owobjdir: docnt}
        - template: azure/relload.yml
          parameters: {owobjdir: docos2}
        - template: azure/relload.yml
          parameters: {owobjdir: docpdf}
        - template: azure/relload.yml
          parameters: {owobjdir: docwin}
        # run build script
        - script: azure/$(owscript)
          displayName: "Build Installers"
          env:
            OWBUILD_STAGE: inst
        # create full binary archive
        - task: ArchiveFiles@2
          condition: in( variables.owarch, variables.owarch_lnx )
          inputs:
            rootFolderOrFile: 'rel'
            includeRootFolder: false
            archiveType: 'tar'
            archiveFile: 'distrib/ow/bin/ow-snapshot.tar.gz'
            replaceExistingArchive: true
        # save all artifacts for distribution
        - template: azure/distsave.yml
  - stage: release
    displayName: "GitHub Release"
    dependsOn:
      - instal
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'Schedule'))
    jobs:
      - job: release
        displayName: "GitHub Release"
        variables:
          owarch: $(owarch_lnx)
          owtag: Current-build
        pool:
          vmImage: $(owimage_lnx)
        steps:
        - checkout: self
          persistCredentials: true
        - template: azure/artiflod.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        - template: azure/distload.yml
          parameters: {owobjdir: $(owobjdir_nt)}
        - template: azure/distload.yml
          parameters: {owobjdir: $(owobjdir_lnx)}
        - bash: echo "##vso[task.setvariable variable=owtagstamp;]$(date +'%Y-%m-%d %H:%M:%S')"
          displayName: "Get current timestamp"
        - bash: echo "##vso[task.setvariable variable=owgitstamp;]`git ls-remote --tags . | sed -n -e \"s:\([0-9a-z]*\) *refs/tags/${{ variables.owtag }}^{}:\1:p\"`"
          displayName: "Get 'Current-build' tag commit"
        - script: git config --global user.email "openwatcomazure@gmail.com"
        - script: git config --global user.name "Open Watcom Azure"
        - bash: >
            if [ ! "$OWGITSTAMP" = "$BUILD_SOURCEVERSION" ]; then
              git tag -d $OWTAG
              git push --delete origin $OWTAG
              git tag -a -m "$OWTAGSTAMP" $OWTAG $BUILD_SOURCEVERSION
              git push origin $OWTAG
            else
              echo "##vso[task.setvariable variable=owtagstamp;]`git tag -l --format='%(contents)' $OWTAG`"
            fi
          displayName: "Recreate 'Current-build' tag"
        - task: GitHubRelease@0
          name: releasedel
          displayName: "Delete Release"
          continueOnError: true
          inputs:
            gitHubConnection: 'open-watcom-v2-releases'
            action: 'delete'
            tag: '$(owtag)'
        - task: GitHubRelease@0
          name: releaseadd
          displayName: "Add Release"
          condition: succeededOrFailed()
          inputs:
            gitHubConnection: 'open-watcom-v2-releases'
            repositoryName: '$(Build.Repository.Name)'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'manual'
            tag: '$(owtag)'
            title: '$(owtag)'
            releaseNotesSource: 'input'
            releaseNotes: 'Last updated $(owtagstamp)'
            assets: |
              distrib/ow/bin/open-watcom-*
              distrib/ow/bin/ow-snapshot.tar.gz
            isPreRelease: true
            addChangeLog: false
  - stage: Wiki
    displayName: "Wiki Documentation Update"
    dependsOn:
      - docs
    condition: >
      and(succeeded(), 
        in(variables['Build.Reason'], 'Schedule'))
    jobs:
      - job: wiki
        displayName: "Wiki Documentation Update"
        variables:
          owwiki_depth:  10
          owwikiproject: open-watcom/open-watcom-v2-webdocs
          owwikiroot:    $(Pipeline.Workspace)/wiki
          owpattern:     ${{ 'Azure Pipelines build' }}
        pool:
          vmImage: $(owimage_lnx)
        steps:
        - checkout: self
          persistCredentials: true
        - script: |
            # configure Git client
            git config --global user.email "openwatcomazure@gmail.com"
            git config --global user.name "Open Watcom Azure"
            # get latest OW sources
            git clone --depth=1 --branch=master https://github.com/$(owwikiproject).git $(owwikiroot)
            cd $(owwikiroot)
          displayName: "Wiki Documentation repository clone"
        - template: azure/wikiload.yml
        - script: |
            git add -v -f .
            if [ -n "$(git status -uno --porcelain)" ]; then
              git commit -v -m "$(owpattern) $(Build.BuildNumber)"
              git checkout -b temp
              #git checkout -B master temp
              git checkout master
              git merge temp
              git branch -d temp
              if [ `git rev-list HEAD --count` -gt $(owwiki_depth) ]; then
                echo "start repository compression"
                git checkout --orphan temp
                git add -v -A
                git commit -v -am "$(owpattern) $(Build.BuildNumber)"
                git branch -v -D master
                git branch -v -m master
                echo "end repository compression"
              fi
              git push -v -f origin master
            fi
