# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

schedules:
- cron: "10 1 * * *"
  displayName: Daily midnight build
  branches:
    include:
    - master

resources:
  repositories:
  - repository: wiki
    type: GitHub
    name: open-watcom/open-watcom-v2-webdocs
    endpoint: open-watcom

variables: 
  owimage_lnx:      'ubuntu-latest'
  owimage_nt:       'vs2017-win2016'
  owimage_osx:      'macOS-latest'
  owtools_lnx:      GCC
  owtools_nt:       VISUALC
  owtools_osx:      CLANG
  owscript_lnx:     buildx.sh
  owscript_nt:      buildx.cmd
  owscript_osx:     buildx.sh
  owarch_lnx:       lnx
  owarch_nt:        nt
  owarch_osx:       osx
  owartifactfile:   owartifact.tar.gz
  owartifactfile7z: owartifact.tar
  owroot:           $(Build.SourcesDirectory)
  owcibin64:        $(Build.SourcesDirectory)\ci\bin64
  owobjdir:         binbuild

stages:
  - stage: start
    displayName: "Start"
    jobs:
      - job: start
        steps:
        - checkout: none
  - stage: mirror
    displayName: "Mirror OW repository"
    dependsOn:
      - start
    condition: >
      and(
        succeeded(), 
        in( variables['Build.Reason'], 'IndividualCI', 'BatchedCI' )
      )
    jobs:
      - template: ci/mirror.yml
  - stage: boot
    displayName: "Bootstrap"
    dependsOn:
      - start
    jobs:
      - job: Bootstrap
        variables:
          owbuild.stage:    boot
        strategy:
          matrix:
            Linux:
              owarch:       ${{ variables.owarch_lnx }}
              owimage:      ${{ variables.owimage_lnx }}
              owtools:      ${{ variables.owtools_lnx }}
              owscript:     ${{ variables.owscript_lnx }}
            Windows:
              owarch:       ${{ variables.owarch_nt }}
              owimage:      ${{ variables.owimage_nt }}
              owtools:      ${{ variables.owtools_nt }}
              owscript:     ${{ variables.owscript_nt }}
            OSX:
              owarch:       ${{ variables.owarch_osx }}
              owimage:      ${{ variables.owimage_osx }}
              owtools:      ${{ variables.owtools_osx }}
              owscript:     ${{ variables.owscript_osx }}
        pool:
          vmImage: $(owimage)
        steps:
        - script: ci/$(owscript)
          displayName: "Bootstrap"
        - template: ci/artfsave.yml
          parameters: 
            path:       build/$(owobjdir)
            prefix:     build
        - template: ci/artfsave.yml
          parameters: 
            path:       bld/watcom/$(owobjdir)
            prefix:     bld-watcom
  - stage: build
    displayName: "Build"
    dependsOn:
      - boot
    jobs:
      - job: Build
        variables:
          owbuild.stage:    build
        strategy:
          matrix:
            Linux:
              owarch:       ${{ variables.owarch_lnx }}
              owimage:      ${{ variables.owimage_lnx }}
              owtools:      ${{ variables.owtools_lnx }}
              owscript:     ${{ variables.owscript_lnx }}
            Windows:
              owarch:       ${{ variables.owarch_nt }}
              owimage:      ${{ variables.owimage_nt }}
              owtools:      ${{ variables.owtools_nt }}
              owscript:     ${{ variables.owscript_nt }}
            OSX:
              owarch:       ${{ variables.owarch_osx }}
              owimage:      ${{ variables.owimage_osx }}
              owtools:      ${{ variables.owtools_osx }}
              owscript:     ${{ variables.owscript_osx }}
        pool:
          vmImage: $(owimage)
        timeoutInMinutes: 90
        steps:
        - template: ci/dosbox.yml
        - template: ci/artfload.yml
          parameters:
            path:       build/$(owobjdir)
            prefix:     build
        - template: ci/artfload.yml
          parameters:
            path:       bld/watcom/$(owobjdir)
            prefix:     bld-watcom
        - script: ci/$(owscript)
          displayName: "Build"
        - template: ci/artfsave.yml
          parameters: 
            path:       rel
            prefix:     rel
            cond:       in( variables.owarch, variables.owarch_lnx, variables.owarch_nt )
        - template: ci/artfsave.yml
          parameters: 
            path:       bld/setupgui
            prefix:     bld-setupgui
            cond:       in( variables.owarch, variables.owarch_lnx, variables.owarch_nt )
  - stage: tests
    displayName: "Tests"
    dependsOn:
      - build
    jobs:
      - job: Tests
        strategy:
          matrix:
            Linux:
              owarch:       ${{ variables.owarch_lnx }}
              owimage:      ${{ variables.owimage_lnx }}
              owtools:      ${{ variables.owtools_lnx }}
              owscript:     ${{ variables.owscript_lnx }}
            Windows:
              owarch:       ${{ variables.owarch_nt }}
              owimage:      ${{ variables.owimage_nt }}
              owtools:      ${{ variables.owtools_nt }}
              owscript:     ${{ variables.owscript_nt }}
        pool:
          vmImage: $(owimage)
        steps:
        - template: ci/artfload.yml
          parameters:
            path:       build/$(owobjdir)
            prefix:     build
  - stage: docs
    displayName: "Documentation Build"
    dependsOn:
      - boot
    jobs:
      - job: Documentation
        variables:
          owarch:           ${{ variables.owarch_nt }}
          owimage:          ${{ variables.owimage_nt }}
          owtools:          ${{ variables.owtools_nt }}
          owscript:         ${{ variables.owscript_nt }}
          owbuild.stage:    docs
        strategy:
          matrix:
            DOS:
              owdoctarget: docdos
            Html:
              owdoctarget: dochtmlhelp
            NT:
              owdoctarget: docnt
            OS2:
              owdoctarget: docos2
            PDF:
              owdoctarget: docpdf
            WIN:
              owdoctarget: docwin
        pool:
          vmImage: $(owimage)
        steps:
        - template: ci/artfload.yml
          parameters:
            path:       build/$(owobjdir)
            prefix:     build
        - script: ci/$(owscript)
          displayName: "Documentation Build"
        - task: PublishPipelineArtifact@1
          displayName: "Save Artifact rel-$(owdoctarget)"
          inputs: 
            artifactName: "rel-$(owdoctarget)"
            targetPath: rel
  - stage: instal
    displayName: "Installers Build"
    dependsOn:
      - docs
      - tests
    #condition: >
    #  and(
    #    succeeded(), 
    #    in( variables['Build.Reason'], 'Schedule' )
    #  )
    jobs:
      - job: instal
        displayName: "Installers Build"
        variables:
          owbuild.stage:    inst
        strategy:
          matrix:
            Linux:
              owarch:       ${{ variables.owarch_lnx }}
              owimage:      ${{ variables.owimage_lnx }}
              owtools:      ${{ variables.owtools_lnx }}
              owscript:     ${{ variables.owscript_lnx }}
            Windows:
              owarch:       ${{ variables.owarch_nt }}
              owimage:      ${{ variables.owimage_nt }}
              owtools:      ${{ variables.owtools_nt }}
              owscript:     ${{ variables.owscript_nt }}
        pool:
          vmImage: $(owimage)
        steps:
        - template: ci/artfload.yml
          parameters:
            path:       build/$(owobjdir)
            prefix:     build
        - template: ci/artfload.yml
          parameters:
            path:       bld/watcom/$(owobjdir)
            prefix:     bld-watcom
        - template: ci/artfload.yml
          parameters:
            path:       bld/setupgui
            prefix:     bld-setupgui
        - template: ci/artfload.yml
          parameters:
            owarch:     $(owarch_lnx)
            path:       bld/setupgui
            prefix:     bld-setupgui
        # consolidate binaries
        - template: ci/artfload.yml
          parameters:
            owarch:     $(owarch_nt)
            path:       rel
            prefix:     rel
        - template: ci/artfload.yml
          parameters:
            owarch:     $(owarch_lnx)
            path:       rel
            prefix:     rel
        # consolidate documentation
        - template: ci/docload.yml
          parameters: {owdoctarget: docdos}
        - template: ci/docload.yml
          parameters: {owdoctarget: dochtmlhelp}
        - template: ci/docload.yml
          parameters: {owdoctarget: docnt}
        - template: ci/docload.yml
          parameters: {owdoctarget: docos2}
        - template: ci/docload.yml
          parameters: {owdoctarget: docpdf}
        - template: ci/docload.yml
          parameters: {owdoctarget: docwin}
        # run build script
        - script: ci/$(owscript)
          displayName: "Build Installers"
        # create full binary archive
        - task: ArchiveFiles@2
          condition: in( variables.owarch, variables.owarch_lnx )
          inputs:
            rootFolderOrFile: 'rel'
            includeRootFolder: false
            archiveType: 'tar'
            archiveFile: 'distrib/ow/bin/ow-snapshot.tar.gz'
            replaceExistingArchive: true
        # save all artifacts for distribution
        - template: ci/artfsave.yml
          parameters: 
            path:       distrib/ow/bin
            prefix:     distrib
  - stage: release
    displayName: "GitHub Release"
    dependsOn:
      - instal
    #condition: >
    #  and(
    #    succeeded(), 
    #    in( variables['Build.Reason'], 'Schedule' )
    #  )
    jobs:
      - job: release
        displayName: "GitHub Release"
        variables:
          owarch:       ${{ variables.owarch_lnx }}
          owimage:      ${{ variables.owimage_lnx }}
          owtools:      ${{ variables.owtools_lnx }}
          owtag:        Current-build
        pool:
          vmImage:      $(owimage)
        steps:
        - template: ci/gituser.yml
        - checkout: self
          persistCredentials: true
        - template: ci/artfload.yml
          parameters:
            path:       build/$(owobjdir)
            prefix:     build
        - template: ci/artfload.yml
          parameters:
            path:       distrib/ow/bin
            prefix:     distrib
        - template: ci/artfload.yml
          parameters:
            owarch:     $(owarch_lnx)
            path:       distrib/ow/bin
            prefix:     distrib
        - bash: echo "##vso[task.setvariable variable=owtagstamp;]$(date +'%Y-%m-%d %H:%M:%S')"
          displayName: "Get current timestamp"
        - bash: echo "##vso[task.setvariable variable=owgitstamp;]`git ls-remote --tags . | sed -n -e \"s:\([0-9a-z]*\) *refs/tags/${{ variables.owtag }}^{}:\1:p\"`"
          displayName: "Get 'Current-build' tag commit"
        - script: |
            if [ ! "$OWGITSTAMP" = "$BUILD_SOURCEVERSION" ]; then
              git tag -d $OWTAG
              git push --delete origin $OWTAG
              git tag -a -m "$OWTAGSTAMP" $OWTAG $BUILD_SOURCEVERSION
              git push origin $OWTAG
            else
              echo "##vso[task.setvariable variable=owtagstamp;]`git tag -l --format='%(contents)' $OWTAG`"
            fi
          displayName: "Recreate 'Current-build' tag"
        - task: GitHubRelease@0
          name: releasedel
          displayName: "Delete Release"
          continueOnError: true
          inputs:
            gitHubConnection: 'open-watcom-v2-releases'
            action: 'delete'
            tag: '$(owtag)'
        - task: GitHubRelease@0
          name: releaseadd
          displayName: "Add Release"
          condition: succeededOrFailed()
          inputs:
            gitHubConnection: 'open-watcom-v2-releases'
            repositoryName: '$(Build.Repository.Name)'
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: 'manual'
            tag: '$(owtag)'
            title: '$(owtag)'
            releaseNotesSource: 'input'
            releaseNotes: 'Last updated $(owtagstamp)'
            assets: |
              distrib/ow/bin/open-watcom-*
              distrib/ow/bin/ow-snapshot.tar.gz
            isPreRelease: true
            addChangeLog: false
  - stage: scan
    displayName: "Coverity Scan"
    dependsOn:
      - tests
    #condition: >
    #  and(
    #    succeeded(), 
    #    in( variables['Build.Reason'], 'Schedule') 
    #  )
    jobs:
      - job: scan
        displayName: "Coverity Scan"
        timeoutInMinutes: 240
        variables:
          owcoverity.project:  open-watcom/open-watcom-v2
          owcoverity.tool.cmd: ''
        strategy:
          matrix:
            Linux:
              owarch:       ${{ variables.owarch_lnx }}
              owimage:      ${{ variables.owimage_lnx }}
              owtools:      ${{ variables.owtools_lnx }}
              owscript:     $(Build.SourcesDirectory)/ci/coverity.sh
              owcoverity.tool.src: linux64
              owcoverity.tool.archive: /tmp/cov-analysis-linux.tgz
              owcoverity.tool.base: /tmp/coverity-scan-analysis
              owcoverity.script: $(Build.SourcesDirectory)/ci/covbuild.sh
              owcoverity.results.archive: open-watcom-v2.tgz
            #Windows:
              #owarch:      ${{ variables.owarch_nt }}
              #owimage:     ${{ variables.owimage_nt }}
              #owtools:     ${{ variables.owtools_nt }}
              #owscript:    $(Build.SourcesDirectory)\ci\coverity.cmd
              #owcoverity.tool.src: win64
              #owcoverity.tool.archive: $(TEMP)\cov-analysis-windows.zip
              #owcoverity.tool.base: $(TEMP)\coverity-scan-analysis
              #owcoverity.script: $(Build.SourcesDirectory)\ci\covbuild.cmd
              #owcoverity.results.archive: open-watcom-v2.zip
        pool:
          vmImage: $(owimage)
        steps:
          - template: ci/coverity.yml
  - template: ci/wiki.yml

